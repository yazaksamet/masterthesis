fp = fp + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 0) {
tn = tn + 1
}
#}
}
resultSet = rbind(resultSet, data.frame(windowSize, 95, tp, fp, tn, fn))
print(paste0("tp:", tp, ", fp:", fp, ", tn:", tn, ", fn:", fn))
}
print("Prediction End:")
print(date())
predictNextValue <- function(windowRecords, windowWeight, currentValue) {
#predictedValue = sum(windowRecords$value * windowWeight) / sum(windowWeight);
#return (currentValue)
windowArima = Arima(windowRecords$value, order=c(5,1,1), method="ML")
windowForecast = forecast(windowArima, h=1, level=95)
return(windowForecast)
}
getConfidenceInterval <- function(studentTIndex, windowSize, windowRecords) {
#studentsTValue <- qt((studentTIndex/100), (windowSize-1))
standardDeviation = sd(windowRecords$calculation_value)
mn = mean(windowRecords$calculation_value)
#confidenceInterval = studentsTValue * standardDeviation * sqrt(1+(1/windowSize))
zdist = 20
diff = (zdist*standardDeviation)/sqrt(windowSize)
return (data.frame(mn-diff,mn+diff))
}
getNormalDistribution <- function(percenteage) {
zdist = 1
if (percenteage == 80) {
zdist = 1.282
} else if (percenteage == 85) {
zdist = 1.440
} else if (percenteage == 90) {
zdist = 1.645
} else if (percenteage == 95) {
zdist = 1.960
} else if (percenteage == 99) {
zdist = 2.576
} else if (percenteage == 99.5) {
zdist = 2.807
} else if (percenteage == 99.9) {
zdist = 3.291
}
return (zdist)
}
print("Prediction Start:")
print(date())
for (windowSize in windowSizeStart:windowSizeEnd) {
windowWeight = seq(1, windowSize, length=windowSize)
print(paste0("windowSize:", windowSize))
#for (studentTIndex in studentTStart:studentTEnd) {
#print(paste0("studentTIndex:", studentTIndex))
tp = 0; tn = 0; fp = 0; fn = 0
startIndex = (windowSize+1)
endIndex = 3000#dim(completeData)[1]
windowEndIndex = windowSize
windowStartIndex = 1
windowRecords = completeData[completeData$timestamp >= windowStartIndex & completeData$timestamp <= windowEndIndex,];
for (i in startIndex:endIndex) {
completeData[i,"predicted_value"] = 0
completeData[i,"conf_low"] = 0
completeData[i,"conf_high"] = 0
completeData[i,"predicted_anomaly"] = 0
if (i != startIndex) {
windowRecords = rbind(windowRecords[windowRecords$timestamp > (i-windowSize-1),], completeData[i-1,])
}
#predictedValue = predictNextValue(windowRecords, windowWeight, completeData[(i-1),"value"]);
#confidenceInterval =getConfidenceInterval(studentTIndex, windowSize, windowRecords)
#windowForecast = predictNextValue(windowRecords, windowWeight, completeData[(i-1),"value"]);
windowForecast = getConfidenceInterval(0, windowSize, windowRecords);
completeData[i,"predicted_value"] = completeData[i,"value"] #windowForecast[["mean"]][1]
completeData[i,"conf_low"] = windowForecast[1,1]#windowForecast[["lower"]][1,1]
completeData[i,"conf_high"] = windowForecast[1,2] #windowForecast[["upper"]][1,1]
predictedAnomaly = if (completeData[i,"value"] <= completeData[i,"conf_high"] & completeData[i,"value"] >= completeData[i,"conf_low"]) 0 else 1
completeData[i,"predicted_anomaly"] = predictedAnomaly
if (completeData[i,"is_anomaly"] == 1) {
#completeData[i,"predicted_value"] = completeData[i,"value"]
lowerDistance = abs(completeData[i,"value"] - completeData[i,"conf_low"])
upperDistance = abs(completeData[i,"value"] - completeData[i,"conf_high"])
completeData[i,"calculation_value"] = (completeData[i,"conf_high"] + completeData[i,"conf_low"])/2
}
if (completeData[i,"is_anomaly"] == 1 & predictedAnomaly == 1) {
tp = tp + 1;
} else if (completeData[i,"is_anomaly"] == 1 & predictedAnomaly == 0) {
fn = fn + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 1) {
fp = fp + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 0) {
tn = tn + 1
}
#}
}
resultSet = rbind(resultSet, data.frame(windowSize, 95, tp, fp, tn, fn))
print(paste0("tp:", tp, ", fp:", fp, ", tn:", tn, ", fn:", fn))
}
print("Prediction End:")
print(date())
View(completeData)
predictNextValue <- function(windowRecords, windowWeight, currentValue) {
#predictedValue = sum(windowRecords$value * windowWeight) / sum(windowWeight);
#return (currentValue)
windowArima = Arima(windowRecords$value, order=c(5,1,1), method="ML")
windowForecast = forecast(windowArima, h=1, level=95)
return(windowForecast)
}
getConfidenceInterval <- function(studentTIndex, windowSize, windowRecords) {
#studentsTValue <- qt((studentTIndex/100), (windowSize-1))
standardDeviation = sd(windowRecords$calculation_value)
mn = mean(windowRecords$calculation_value)
#confidenceInterval = studentsTValue * standardDeviation * sqrt(1+(1/windowSize))
zdist = 25
diff = (zdist*standardDeviation)/sqrt(windowSize)
return (data.frame(mn-diff,mn+diff))
}
getNormalDistribution <- function(percenteage) {
zdist = 1
if (percenteage == 80) {
zdist = 1.282
} else if (percenteage == 85) {
zdist = 1.440
} else if (percenteage == 90) {
zdist = 1.645
} else if (percenteage == 95) {
zdist = 1.960
} else if (percenteage == 99) {
zdist = 2.576
} else if (percenteage == 99.5) {
zdist = 2.807
} else if (percenteage == 99.9) {
zdist = 3.291
}
return (zdist)
}
print("Prediction Start:")
print(date())
for (windowSize in windowSizeStart:windowSizeEnd) {
windowWeight = seq(1, windowSize, length=windowSize)
print(paste0("windowSize:", windowSize))
#for (studentTIndex in studentTStart:studentTEnd) {
#print(paste0("studentTIndex:", studentTIndex))
tp = 0; tn = 0; fp = 0; fn = 0
startIndex = (windowSize+1)
endIndex = 3000#dim(completeData)[1]
windowEndIndex = windowSize
windowStartIndex = 1
windowRecords = completeData[completeData$timestamp >= windowStartIndex & completeData$timestamp <= windowEndIndex,];
for (i in startIndex:endIndex) {
completeData[i,"predicted_value"] = 0
completeData[i,"conf_low"] = 0
completeData[i,"conf_high"] = 0
completeData[i,"predicted_anomaly"] = 0
if (i != startIndex) {
windowRecords = rbind(windowRecords[windowRecords$timestamp > (i-windowSize-1),], completeData[i-1,])
}
#predictedValue = predictNextValue(windowRecords, windowWeight, completeData[(i-1),"value"]);
#confidenceInterval =getConfidenceInterval(studentTIndex, windowSize, windowRecords)
#windowForecast = predictNextValue(windowRecords, windowWeight, completeData[(i-1),"value"]);
windowForecast = getConfidenceInterval(0, windowSize, windowRecords);
completeData[i,"predicted_value"] = completeData[i,"value"] #windowForecast[["mean"]][1]
completeData[i,"conf_low"] = windowForecast[1,1]#windowForecast[["lower"]][1,1]
completeData[i,"conf_high"] = windowForecast[1,2] #windowForecast[["upper"]][1,1]
predictedAnomaly = if (completeData[i,"value"] <= completeData[i,"conf_high"] & completeData[i,"value"] >= completeData[i,"conf_low"]) 0 else 1
completeData[i,"predicted_anomaly"] = predictedAnomaly
if (completeData[i,"is_anomaly"] == 1) {
#completeData[i,"predicted_value"] = completeData[i,"value"]
lowerDistance = abs(completeData[i,"value"] - completeData[i,"conf_low"])
upperDistance = abs(completeData[i,"value"] - completeData[i,"conf_high"])
completeData[i,"calculation_value"] = (completeData[i,"conf_high"] + completeData[i,"conf_low"])/2
}
if (completeData[i,"is_anomaly"] == 1 & predictedAnomaly == 1) {
tp = tp + 1;
} else if (completeData[i,"is_anomaly"] == 1 & predictedAnomaly == 0) {
fn = fn + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 1) {
fp = fp + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 0) {
tn = tn + 1
}
#}
}
resultSet = rbind(resultSet, data.frame(windowSize, 95, tp, fp, tn, fn))
print(paste0("tp:", tp, ", fp:", fp, ", tn:", tn, ", fn:", fn))
}
print("Prediction End:")
print(date())
print("Prediction Start:")
print(date())
for (windowSize in windowSizeStart:windowSizeEnd) {
windowWeight = seq(1, windowSize, length=windowSize)
print(paste0("windowSize:", windowSize))
#for (studentTIndex in studentTStart:studentTEnd) {
#print(paste0("studentTIndex:", studentTIndex))
tp = 0; tn = 0; fp = 0; fn = 0
startIndex = (windowSize+1)
endIndex = dim(completeData)[1]
windowEndIndex = windowSize
windowStartIndex = 1
windowRecords = completeData[completeData$timestamp >= windowStartIndex & completeData$timestamp <= windowEndIndex,];
for (i in startIndex:endIndex) {
completeData[i,"predicted_value"] = 0
completeData[i,"conf_low"] = 0
completeData[i,"conf_high"] = 0
completeData[i,"predicted_anomaly"] = 0
if (i != startIndex) {
windowRecords = rbind(windowRecords[windowRecords$timestamp > (i-windowSize-1),], completeData[i-1,])
}
#predictedValue = predictNextValue(windowRecords, windowWeight, completeData[(i-1),"value"]);
#confidenceInterval =getConfidenceInterval(studentTIndex, windowSize, windowRecords)
#windowForecast = predictNextValue(windowRecords, windowWeight, completeData[(i-1),"value"]);
windowForecast = getConfidenceInterval(0, windowSize, windowRecords);
completeData[i,"predicted_value"] = completeData[i,"value"] #windowForecast[["mean"]][1]
completeData[i,"conf_low"] = windowForecast[1,1]#windowForecast[["lower"]][1,1]
completeData[i,"conf_high"] = windowForecast[1,2] #windowForecast[["upper"]][1,1]
predictedAnomaly = if (completeData[i,"value"] <= completeData[i,"conf_high"] & completeData[i,"value"] >= completeData[i,"conf_low"]) 0 else 1
completeData[i,"predicted_anomaly"] = predictedAnomaly
if (completeData[i,"is_anomaly"] == 1) {
#completeData[i,"predicted_value"] = completeData[i,"value"]
lowerDistance = abs(completeData[i,"value"] - completeData[i,"conf_low"])
upperDistance = abs(completeData[i,"value"] - completeData[i,"conf_high"])
completeData[i,"calculation_value"] = (completeData[i,"conf_high"] + completeData[i,"conf_low"])/2
}
if (completeData[i,"is_anomaly"] == 1 & predictedAnomaly == 1) {
tp = tp + 1;
} else if (completeData[i,"is_anomaly"] == 1 & predictedAnomaly == 0) {
fn = fn + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 1) {
fp = fp + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 0) {
tn = tn + 1
}
#}
}
resultSet = rbind(resultSet, data.frame(windowSize, 95, tp, fp, tn, fn))
print(paste0("tp:", tp, ", fp:", fp, ", tn:", tn, ", fn:", fn))
}
print("Prediction End:")
print(date())
(1347) / (1347+304)
View(resultSet)
blockData = completeData[completeData$timestamp > 1500 & completeData$timestamp < 3000,]
tpAnomalies = blockData[blockData$is_anomaly == 1 & blockData$predicted_anomaly == 1,]
fnAnomalies = blockData[blockData$is_anomaly == 1 & blockData$predicted_anomaly == 0,]
fpAnomalies = blockData[blockData$is_anomaly == 0 & blockData$predicted_anomaly == 1,]
tnAnomalies = blockData[blockData$is_anomaly == 0 & blockData$predicted_anomaly == 0,]
plot.ts(ts(blockData$value))
points(data.frame(tpAnomalies$timestamp - 1500, tpAnomalies$value), col="green", pch=17)
points(data.frame(fnAnomalies$timestamp - 1500, fnAnomalies$value), col="yellow", pch=17)
points(data.frame(fpAnomalies$timestamp - 1500, fpAnomalies$value), col="red", pch=17)
points(data.frame(tnAnomalies$timestamp - 1500, tnAnomalies$value), col="blue", pch=17)
blockData = completeData[completeData$timestamp > 1500 & completeData$timestamp < 3000,]
tpAnomalies = blockData[blockData$is_anomaly == 1 & blockData$predicted_anomaly == 1,]
fnAnomalies = blockData[blockData$is_anomaly == 1 & blockData$predicted_anomaly == 0,]
fpAnomalies = blockData[blockData$is_anomaly == 0 & blockData$predicted_anomaly == 1,]
plot.ts(ts(blockData$value))
points(data.frame(tpAnomalies$timestamp - 1500, tpAnomalies$value), col="green", pch=17)
points(data.frame(fnAnomalies$timestamp - 1500, fnAnomalies$value), col="yellow", pch=17)
points(data.frame(fpAnomalies$timestamp - 1500, fpAnomalies$value), col="red", pch=17)
blockData = completeData[completeData$timestamp <= 1500,]
tpAnomalies = blockData[blockData$is_anomaly == 1 & blockData$predicted_anomaly == 1,]
fnAnomalies = blockData[blockData$is_anomaly == 1 & blockData$predicted_anomaly == 0,]
fpAnomalies = blockData[blockData$is_anomaly == 0 & blockData$predicted_anomaly == 1,]
plot.ts(ts(blockData$value))
points(data.frame(tpAnomalies$timestamp, tpAnomalies$value), col="green", pch=17)
points(data.frame(fnAnomalies$timestamp, fnAnomalies$value), col="yellow", pch=17)
points(data.frame(fpAnomalies$timestamp , fpAnomalies$value), col="red", pch=17)
blockData = completeData[completeData$timestamp <= 4500 & completeData$timestamp > 3000,]
tpAnomalies = blockData[blockData$is_anomaly == 1 & blockData$predicted_anomaly == 1,]
fnAnomalies = blockData[blockData$is_anomaly == 1 & blockData$predicted_anomaly == 0,]
fpAnomalies = blockData[blockData$is_anomaly == 0 & blockData$predicted_anomaly == 1,]
plot.ts(ts(blockData$value))
points(data.frame(tpAnomalies$timestamp - 3000, tpAnomalies$value), col="green", pch=17)
points(data.frame(fnAnomalies$timestamp - 3000, fnAnomalies$value), col="yellow", pch=17)
points(data.frame(fpAnomalies$timestamp - 3000, fpAnomalies$value), col="red", pch=17)
resultSet
library('forecast')
library('tseries')
windowSizeStart = 10
windowSizeEnd = 30
intervalMultiplier = 25 # interval multiplier
resultSet = data.frame(matrix(ncol = 6, nrow = 0))
colnames(resultSet) <- c("windowSize", "IntervalMultiplier", "tp", "fp", "tn", "fn")
setwd("C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Thesis/code/r/")
completeData = read.csv(file="..\\..\\data\\workspace\\real_full_standard.csv", header=TRUE, sep=",")
completeData = cbind(completeData, predicted_value = 0, conf_low = 0, conf_high = 0, predicted_anomaly = 0, calculation_value = completeData$value)
predictNextValue <- function(windowRecords, windowWeight, currentValue) {
#predictedValue = sum(windowRecords$value * windowWeight) / sum(windowWeight);
#return (currentValue)
windowArima = Arima(windowRecords$value, order=c(5,1,1), method="ML")
windowForecast = forecast(windowArima, h=1, level=95)
return(windowForecast)
}
getConfidenceInterval <- function(studentTIndex, windowSize, windowRecords) {
#studentsTValue <- qt((studentTIndex/100), (windowSize-1))
standardDeviation = sd(windowRecords$calculation_value)
mn = mean(windowRecords$calculation_value)
#confidenceInterval = studentsTValue * standardDeviation * sqrt(1+(1/windowSize))
diff = (intervalMultiplier*standardDeviation)/sqrt(windowSize)
return (data.frame(mn-diff,mn+diff))
}
getNormalDistribution <- function(percenteage) {
zdist = 1
if (percenteage == 80) {
zdist = 1.282
} else if (percenteage == 85) {
zdist = 1.440
} else if (percenteage == 90) {
zdist = 1.645
} else if (percenteage == 95) {
zdist = 1.960
} else if (percenteage == 99) {
zdist = 2.576
} else if (percenteage == 99.5) {
zdist = 2.807
} else if (percenteage == 99.9) {
zdist = 3.291
}
return (zdist)
}
windowSizeStart = 10
windowSizeEnd = 30
intervalMultiplier = 25 # interval multiplier
resultSet = data.frame(matrix(ncol = 6, nrow = 0))
colnames(resultSet) <- c("windowSize", "IntervalMultiplier", "tp", "fp", "tn", "fn")
setwd("C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Thesis/code/r/")
completeData = read.csv(file="..\\..\\data\\workspace\\real_full_standard.csv", header=TRUE, sep=",")
completeData = cbind(completeData, predicted_value = 0, conf_low = 0, conf_high = 0, predicted_anomaly = 0, calculation_value = completeData$value)
#predictNextValue <- function(windowRecords, windowWeight, currentValue) {
#predictedValue = sum(windowRecords$value * windowWeight) / sum(windowWeight);
#return (currentValue)
#windowArima = Arima(windowRecords$value, order=c(5,1,1), method="ML")
#windowForecast = forecast(windowArima, h=1, level=95)
#return(windowForecast)
#}
getConfidenceInterval <- function(studentTIndex, windowSize, windowRecords) {
#studentsTValue <- qt((studentTIndex/100), (windowSize-1))
standardDeviation = sd(windowRecords$calculation_value)
mn = mean(windowRecords$calculation_value)
#confidenceInterval = studentsTValue * standardDeviation * sqrt(1+(1/windowSize))
diff = (intervalMultiplier*standardDeviation)/sqrt(windowSize)
return (data.frame(mn-diff,mn+diff))
}
getNormalDistribution <- function(percenteage) {
zdist = 1
if (percenteage == 80) {
zdist = 1.282
} else if (percenteage == 85) {
zdist = 1.440
} else if (percenteage == 90) {
zdist = 1.645
} else if (percenteage == 95) {
zdist = 1.960
} else if (percenteage == 99) {
zdist = 2.576
} else if (percenteage == 99.5) {
zdist = 2.807
} else if (percenteage == 99.9) {
zdist = 3.291
}
return (zdist)
}
print("Prediction Start:")
print(date())
for (windowSize in windowSizeStart:windowSizeEnd) {
windowWeight = seq(1, windowSize, length=windowSize)
print(paste0("windowSize:", windowSize))
#for (studentTIndex in studentTStart:studentTEnd) {
#print(paste0("studentTIndex:", studentTIndex))
tp = 0; tn = 0; fp = 0; fn = 0
startIndex = (windowSize+1)
endIndex = dim(completeData)[1]
windowEndIndex = windowSize
windowStartIndex = 1
windowRecords = completeData[completeData$timestamp >= windowStartIndex & completeData$timestamp <= windowEndIndex,];
for (i in startIndex:endIndex) {
completeData[i,"predicted_value"] = 0
completeData[i,"conf_low"] = 0
completeData[i,"conf_high"] = 0
completeData[i,"predicted_anomaly"] = 0
if (i != startIndex) {
windowRecords = rbind(windowRecords[windowRecords$timestamp > (i-windowSize-1),], completeData[i-1,])
}
#predictedValue = predictNextValue(windowRecords, windowWeight, completeData[(i-1),"value"]);
#confidenceInterval =getConfidenceInterval(studentTIndex, windowSize, windowRecords)
#windowForecast = predictNextValue(windowRecords, windowWeight, completeData[(i-1),"value"]);
windowForecast = getConfidenceInterval(0, windowSize, windowRecords);
completeData[i,"predicted_value"] = completeData[i,"value"] #windowForecast[["mean"]][1]
completeData[i,"conf_low"] = windowForecast[1,1]#windowForecast[["lower"]][1,1]
completeData[i,"conf_high"] = windowForecast[1,2] #windowForecast[["upper"]][1,1]
predictedAnomaly = if (completeData[i,"value"] <= completeData[i,"conf_high"] & completeData[i,"value"] >= completeData[i,"conf_low"]) 0 else 1
completeData[i,"predicted_anomaly"] = predictedAnomaly
if (completeData[i,"is_anomaly"] == 1) {
#completeData[i,"predicted_value"] = completeData[i,"value"]
lowerDistance = abs(completeData[i,"value"] - completeData[i,"conf_low"])
upperDistance = abs(completeData[i,"value"] - completeData[i,"conf_high"])
completeData[i,"calculation_value"] = (completeData[i,"conf_high"] + completeData[i,"conf_low"])/2
}
if (completeData[i,"is_anomaly"] == 1 & predictedAnomaly == 1) {
tp = tp + 1;
} else if (completeData[i,"is_anomaly"] == 1 & predictedAnomaly == 0) {
fn = fn + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 1) {
fp = fp + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 0) {
tn = tn + 1
}
#}
}
resultSet = rbind(resultSet, data.frame(windowSize, intervalMultiplier, tp, fp, tn, fn))
print(paste0("tp:", tp, ", fp:", fp, ", tn:", tn, ", fn:", fn))
}
print("Prediction End:")
print(date())
write.csv(resultSet, "window_20171226")
write.csv(resultSet, "window_20171226.csv")
View(resultSet)
windowSizeStart = 10
windowSizeEnd = 30
intervalMultiplier = 30 # interval multiplier
resultSet = data.frame(matrix(ncol = 6, nrow = 0))
colnames(resultSet) <- c("windowSize", "IntervalMultiplier", "tp", "fp", "tn", "fn")
setwd("C:/Users/sametyazak/Desktop/ynwa/bau/2017 - Thesis/code/r/")
completeData = read.csv(file="..\\..\\data\\workspace\\real_full_standard.csv", header=TRUE, sep=",")
completeData = cbind(completeData, predicted_value = 0, conf_low = 0, conf_high = 0, predicted_anomaly = 0, calculation_value = completeData$value)
#predictNextValue <- function(windowRecords, windowWeight, currentValue) {
#predictedValue = sum(windowRecords$value * windowWeight) / sum(windowWeight);
#return (currentValue)
#windowArima = Arima(windowRecords$value, order=c(5,1,1), method="ML")
#windowForecast = forecast(windowArima, h=1, level=95)
#return(windowForecast)
#}
getConfidenceInterval <- function(studentTIndex, windowSize, windowRecords) {
#studentsTValue <- qt((studentTIndex/100), (windowSize-1))
standardDeviation = sd(windowRecords$calculation_value)
mn = mean(windowRecords$calculation_value)
#confidenceInterval = studentsTValue * standardDeviation * sqrt(1+(1/windowSize))
diff = (intervalMultiplier*standardDeviation)/sqrt(windowSize)
return (data.frame(mn-diff,mn+diff))
}
getNormalDistribution <- function(percenteage) {
zdist = 1
if (percenteage == 80) {
zdist = 1.282
} else if (percenteage == 85) {
zdist = 1.440
} else if (percenteage == 90) {
zdist = 1.645
} else if (percenteage == 95) {
zdist = 1.960
} else if (percenteage == 99) {
zdist = 2.576
} else if (percenteage == 99.5) {
zdist = 2.807
} else if (percenteage == 99.9) {
zdist = 3.291
}
return (zdist)
}
print("Prediction Start:")
print(date())
for (windowSize in windowSizeStart:windowSizeEnd) {
windowWeight = seq(1, windowSize, length=windowSize)
print(paste0("windowSize:", windowSize))
#for (studentTIndex in studentTStart:studentTEnd) {
#print(paste0("studentTIndex:", studentTIndex))
tp = 0; tn = 0; fp = 0; fn = 0
startIndex = (windowSize+1)
endIndex = dim(completeData)[1]
windowEndIndex = windowSize
windowStartIndex = 1
windowRecords = completeData[completeData$timestamp >= windowStartIndex & completeData$timestamp <= windowEndIndex,];
for (i in startIndex:endIndex) {
completeData[i,"predicted_value"] = 0
completeData[i,"conf_low"] = 0
completeData[i,"conf_high"] = 0
completeData[i,"predicted_anomaly"] = 0
if (i != startIndex) {
windowRecords = rbind(windowRecords[windowRecords$timestamp > (i-windowSize-1),], completeData[i-1,])
}
#predictedValue = predictNextValue(windowRecords, windowWeight, completeData[(i-1),"value"]);
#confidenceInterval =getConfidenceInterval(studentTIndex, windowSize, windowRecords)
#windowForecast = predictNextValue(windowRecords, windowWeight, completeData[(i-1),"value"]);
windowForecast = getConfidenceInterval(0, windowSize, windowRecords);
completeData[i,"predicted_value"] = completeData[i,"value"] #windowForecast[["mean"]][1]
completeData[i,"conf_low"] = windowForecast[1,1]#windowForecast[["lower"]][1,1]
completeData[i,"conf_high"] = windowForecast[1,2] #windowForecast[["upper"]][1,1]
predictedAnomaly = if (completeData[i,"value"] <= completeData[i,"conf_high"] & completeData[i,"value"] >= completeData[i,"conf_low"]) 0 else 1
completeData[i,"predicted_anomaly"] = predictedAnomaly
if (completeData[i,"is_anomaly"] == 1) {
#completeData[i,"predicted_value"] = completeData[i,"value"]
lowerDistance = abs(completeData[i,"value"] - completeData[i,"conf_low"])
upperDistance = abs(completeData[i,"value"] - completeData[i,"conf_high"])
completeData[i,"calculation_value"] = (completeData[i,"conf_high"] + completeData[i,"conf_low"])/2
}
if (completeData[i,"is_anomaly"] == 1 & predictedAnomaly == 1) {
tp = tp + 1;
} else if (completeData[i,"is_anomaly"] == 1 & predictedAnomaly == 0) {
fn = fn + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 1) {
fp = fp + 1
} else if (completeData[i,"is_anomaly"] == 0 & predictedAnomaly == 0) {
tn = tn + 1
}
#}
}
resultSet = rbind(resultSet, data.frame(windowSize, intervalMultiplier, tp, fp, tn, fn))
print(paste0("tp:", tp, ", fp:", fp, ", tn:", tn, ", fn:", fn))
}
print("Prediction End:")
print(date())
write.csv(resultSet, "window_20171226_2.csv")
View(resultSet)
